import os
import django
from telebot import types
import telebot

os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'config.settings')
django.setup()

from main.models import Product, Category, Users, Cart, SubCategory, Order, OrderItem, UserProfile
from django.db.models import Sum
from django.db import transaction
import logging

logger = logging.getLogger(__name__)

TOKEN = '7937515092:AAF2FhDyBOG_g4KqsrehJzENOB9joTbPhbg'
bot = telebot.TeleBot(TOKEN)

user_states = {}

def get_main_keyboard():
    keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True)
    keyboard.add(
        types.KeyboardButton("üõí –ö–∞—Ç–µ–≥–æ—Ä–∏–∏"), 
        types.KeyboardButton("üîç –ü–æ–∏—Å–∫")
    )
    keyboard.add(
        types.KeyboardButton("üì¶ –°–ø–∏—Å–æ–∫ —Ç–æ–≤–∞—Ä–æ–≤"),
        types.KeyboardButton("üóÇ –ö–æ—Ä–∑–∏–Ω–∞")
    )
    keyboard.add(
        types.KeyboardButton("üìã –ú–æ–∏ –∑–∞–∫–∞–∑—ã"),
        types.KeyboardButton("üë§ –õ–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç")    
    )
    return keyboard


def create_order_from_cart(user):
    cart_items = Cart.objects.filter(user=user)
    if not cart_items.exists():
        return None
    try:
        with transaction.atomic():
            total_price = sum(item.total_price() for item in cart_items)
            order = Order.objects.create(
                user=user,
                total_price=total_price,
                status='pending'
            )
            for cart_item in cart_items:
                OrderItem.objects.create(
                    order=order,
                    product=cart_item.product,
                    quantity=cart_item.quantity,
                    price=cart_item.product.price
                )
                product = cart_item.product
                product.stock -= cart_item.quantity
                product.save()
            cart_items.delete()
            return order
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–∫–∞–∑–∞: {e}")
        return None

@bot.message_handler(func=lambda message: message.text == "üìã –ú–æ–∏ –∑–∞–∫–∞–∑—ã")
def view_order_history(message):
    telegram_id = message.from_user.id
    user = Users.objects.filter(telegram_id=telegram_id).first()
    if not user:
        bot.send_message(message.chat.id, "–û—à–∏–±–∫–∞: –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        return
    orders = Order.objects.filter(user=user).order_by('-created_at')
    if orders.exists():
        for order in orders:
            order_items = "\n".join([
                f"{item.product.name} - {item.quantity} —à—Ç. ({item.price}‚Ç∏)" 
                for item in order.items.all()
            ])
            markup = types.InlineKeyboardMarkup()
            markup.add(
                types.InlineKeyboardButton(
                    "üì¶ –°—Ç–∞—Ç—É—Å –∑–∞–∫–∞–∑–∞", 
                    callback_data=f"order_status_{order.id}"
                )
            )
            bot.send_message(
                message.chat.id,
                f"üìù –ó–∞–∫–∞–∑ #{order.id}\n"
                f"üìÖ –î–∞—Ç–∞: {order.created_at.strftime('%d.%m.%Y %H:%M')}\n"
                f"üí∞ –°—É–º–º–∞: {order.total_price}‚Ç∏\n"
                f"üè∑Ô∏è –°—Ç–∞—Ç—É—Å: {order.get_status_display()}\n\n"
                f"üõçÔ∏è –¢–æ–≤–∞—Ä—ã:\n{order_items}",
                reply_markup=markup
            )
    else:
        bot.send_message(message.chat.id, "–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –∑–∞–∫–∞–∑–æ–≤.")

@bot.callback_query_handler(func=lambda call: call.data.startswith("order_status_"))
def check_order_status(call):
    try:
        order_id = int(call.data.split("_")[-1])
        order = Order.objects.get(id=order_id)
        status_details = {
            'pending': "–û–∂–∏–¥–∞–µ—Ç –æ–ø–ª–∞—Ç—ã. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞–≤–µ—Ä—à–∏—Ç–µ –æ–ø–ª–∞—Ç—É.",
            'paid': "–û–ø–ª–∞—Ç–∞ –ø–æ–ª—É—á–µ–Ω–∞. –ó–∞–∫–∞–∑ –≥–æ—Ç–æ–≤–∏—Ç—Å—è –∫ –æ–±—Ä–∞–±–æ—Ç–∫–µ.",
            'processing': "–ó–∞–∫–∞–∑ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç—Å—è. –°–∫–æ—Ä–æ –±—É–¥–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω.",
            'shipped': "–ó–∞–∫–∞–∑ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω. –û–∂–∏–¥–∞–π—Ç–µ –¥–æ—Å—Ç–∞–≤–∫—É.",
            'completed': "–ó–∞–∫–∞–∑ —É—Å–ø–µ—à–Ω–æ –¥–æ—Å—Ç–∞–≤–ª–µ–Ω.",
            'cancelled': "–ó–∞–∫–∞–∑ –æ—Ç–º–µ–Ω–µ–Ω."
        }
        bot.answer_callback_query(
            call.id, 
            status_details.get(order.status, "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Å—Ç–∞—Ç—É—Å"),
            show_alert=True
        )
    except Order.DoesNotExist:
        bot.answer_callback_query(call.id, "–ó–∞–∫–∞–∑ –Ω–µ –Ω–∞–π–¥–µ–Ω.")


@bot.message_handler(commands=['start'])
def send_privet(message):
    telegram_id = message.from_user.id
    first_name = message.from_user.first_name
    user, created = Users.objects.get_or_create(
        telegram_id=telegram_id,
        defaults={'first_name': first_name}
    )
    if created:
        markup = types.ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True)
        button_phone = types.KeyboardButton("üì± –û—Ç–ø—Ä–∞–≤–∏—Ç—å –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞", request_contact=True)
        markup.add(button_phone)
        bot.send_message(
            message.chat.id,
            f"–ü—Ä–∏–≤–µ—Ç, {first_name}! –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ BKStore. –î–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –≤–∞—à –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞.",
            reply_markup=markup
        )
        user_states[telegram_id] = "wait_phone"
    else:
        bot.send_message(
            message.chat.id,
            f"–° –≤–æ–∑–≤—Ä–∞—â–µ–Ω–∏–µ–º {first_name} –≤ BKStore. –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ –∏–∑ –º–µ–Ω—é:",
            reply_markup=get_main_keyboard()
        )

@bot.message_handler(content_types=['contact'])
def handle_contact(message):
    if message.contact is not None:
        telegram_id = message.from_user.id
        phone_number = message.contact.phone_number
        user = Users.objects.filter(telegram_id=telegram_id).first()
        if user:
            user.phone_number = phone_number
            user.save()
            bot.reply_to(message, "–°–ø–∞—Å–∏–±–æ! –í–∞—à –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω—ë–Ω. –¢–µ–ø–µ—Ä—å –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –≤–∞—à email.")
            user_states[telegram_id] = "wait_email"
        else:
            bot.reply_to(message, "–û—à–∏–±–∫–∞: –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")

@bot.message_handler(func=lambda message: user_states.get(message.from_user.id) == "wait_email")
def handle_email(message):
    telegram_id = message.from_user.id
    email = message.text
    user = Users.objects.filter(telegram_id=telegram_id).first()
    if user:
        user.email = email
        user.save()
        bot.reply_to(message, "–°–ø–∞—Å–∏–±–æ! –í–∞—à email —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω—ë–Ω. –¢–µ–ø–µ—Ä—å –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –≤–∞—à–µ –∏–º—è.")
        user_states[telegram_id] = "wait_name"
    else:
        bot.reply_to(message, "–û—à–∏–±–∫–∞: –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")

@bot.message_handler(func=lambda message: user_states.get(message.from_user.id) == "wait_name")
def handle_name(message):
    telegram_id = message.from_user.id
    first_name = message.text
    user = Users.objects.filter(telegram_id=telegram_id).first()
    if user:
        user.first_name = first_name
        user.save()
        bot.reply_to(message, "–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞! –¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è BKStore. –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
                     reply_markup=get_main_keyboard())
        user_states.pop(telegram_id, None)
    else:
        bot.reply_to(message, "–û—à–∏–±–∫–∞: –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")

@bot.message_handler(func=lambda message: message.text == "üë§ –õ–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç")
def personal_cabinet(message):
    telegram_id = message.from_user.id
    user = Users.objects.filter(telegram_id=telegram_id).first()
    if not user:
        bot.send_message(message.chat.id, "–û—à–∏–±–∫–∞: –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        return
    markup = types.InlineKeyboardMarkup()
    markup.add(
        types.InlineKeyboardButton("‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –ø—Ä–æ—Ñ–∏–ª—å", callback_data="edit_profile"),
        types.InlineKeyboardButton("üìç –ê–¥—Ä–µ—Å –¥–æ—Å—Ç–∞–≤–∫–∏", callback_data="edit_address")
    )
    bot.send_message(
        message.chat.id,
        f"üë§ –õ–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç\n"
        f"–ò–º—è: {user.first_name}\n"
        f"–¢–µ–ª–µ—Ñ–æ–Ω: {user.phone_number}\n"
        f"Email: {user.email}",
        reply_markup=markup
    )

@bot.callback_query_handler(func=lambda call: call.data == "edit_profile")
def edit_profile(call):
    telegram_id = call.from_user.id
    user_states[telegram_id] = "edit_profile"
    bot.send_message(call.message.chat.id, "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –∏–º—è:")

@bot.message_handler(func=lambda message: user_states.get(message.from_user.id) == "edit_profile")
def update_profile_name(message):
    telegram_id = message.from_user.id
    user = Users.objects.filter(telegram_id=telegram_id).first()
    if user:
        user.first_name = message.text
        user.save()
        bot.send_message(message.chat.id, "–ò–º—è –æ–±–Ω–æ–≤–ª–µ–Ω–æ!", reply_markup=get_main_keyboard())
        user_states.pop(telegram_id)
    else:
        bot.send_message(message.chat.id, "–û—à–∏–±–∫–∞: –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.")

@bot.callback_query_handler(func=lambda call: call.data == "edit_address")
def edit_address(call):
    telegram_id = call.from_user.id
    user_states[telegram_id] = "edit_address"
    bot.send_message(call.message.chat.id, "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π –∞–¥—Ä–µ—Å –¥–æ—Å—Ç–∞–≤–∫–∏:")

@bot.message_handler(func=lambda message: user_states.get(message.from_user.id) == "edit_address")
def update_address(message):
    telegram_id = message.from_user.id
    user = Users.objects.filter(telegram_id=telegram_id).first()
    if user:
        profile, created = UserProfile.objects.get_or_create(user=user)
        profile.address = message.text
        profile.save()
        bot.send_message(message.chat.id, "–ê–¥—Ä–µ—Å –¥–æ—Å—Ç–∞–≤–∫–∏ –æ–±–Ω–æ–≤–ª–µ–Ω!", reply_markup=get_main_keyboard())
    else:
        bot.send_message(message.chat.id, "–û—à–∏–±–∫–∞: –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.")


@bot.message_handler(func=lambda message: message.text == "üõí –ö–∞—Ç–µ–≥–æ—Ä–∏–∏")
def show_categories(message):
    categories = Category.objects.all()  
    if categories.exists():
        markup = types.InlineKeyboardMarkup()
        for category in categories:
            markup.add(types.InlineKeyboardButton(category.name, callback_data=f"category_{category.id}"))
        bot.send_message(message.chat.id, "–í—ã–±–µ—Ä–∏—Ç–µ –±—Ä–µ–Ω–¥:", reply_markup=markup)
    else:
        bot.send_message(message.chat.id, "–ö–∞—Ç–µ–≥–æ—Ä–∏–∏ –ø–æ–∫–∞ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç.")

@bot.callback_query_handler(func=lambda call: call.data.startswith("category_"))
def show_subcategories(call):
    category_id = int(call.data.split("_")[1])  
    subcategories = SubCategory.objects.filter(parent_id=category_id)  
    if subcategories.exists():
        markup = types.InlineKeyboardMarkup()
        for subcategory in subcategories:
            markup.add(types.InlineKeyboardButton(subcategory.name, callback_data=f"subcategory_{subcategory.id}"))
        bot.edit_message_text("–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏—é:", chat_id=call.message.chat.id, message_id=call.message.id, reply_markup=markup)
    else:
        bot.edit_message_text("–ü–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –¥–ª—è —ç—Ç–æ–≥–æ –±—Ä–µ–Ω–¥–∞ –ø–æ–∫–∞ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç.", chat_id=call.message.chat.id, message_id=call.message.id)

@bot.callback_query_handler(func=lambda call: call.data.startswith("subcategory_"))
def show_products(call):
    subcategory_id = int(call.data.split("_")[1])  
    products = Product.objects.filter(category_id=subcategory_id)  
    if products.exists():
        for product in products:
            markup = types.InlineKeyboardMarkup()
            markup.add(types.InlineKeyboardButton("–î–æ–±–∞–≤–∏—Ç—å –≤ –∫–æ—Ä–∑–∏–Ω—É üõí", callback_data=f"add_to_cart_{product.id}"))
            bot.send_message(
                call.message.chat.id,
                f"üì± {product.name}\nüíµ –¶–µ–Ω–∞: {product.price}‚Ç∏\nüì¶ –í –Ω–∞–ª–∏—á–∏–∏: {product.stock} —à—Ç.\n–û–ø–∏—Å–∞–Ω–∏–µ: {product.description}",
                reply_markup=markup
            )
    else:
        bot.edit_message_text("–¢–æ–≤–∞—Ä—ã –¥–ª—è —ç—Ç–æ–π –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –ø–æ–∫–∞ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç.", chat_id=call.message.chat.id, message_id=call.message.id)

@bot.callback_query_handler(func=lambda call: call.data.startswith("company_"))
def show_products(call):
    company_id = int(call.data.split("_")[1])
    company = Category.objects.get(id=company_id)
    products = Product.objects.filter(category=company)
    if products.exists():
        for product in products:
            markup = types.InlineKeyboardMarkup()
            markup.add(
                types.InlineKeyboardButton("–î–æ–±–∞–≤–∏—Ç—å –≤ –∫–æ—Ä–∑–∏–Ω—É üõí", callback_data=f"add_to_cart_{product.id}")
            )
            markup.add(
                types.InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –∫ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏", callback_data="back_to_companies")
            )
            bot.send_message(
                call.message.chat.id,
                f"üì± {product.name}\n"
                f"üíµ –¶–µ–Ω–∞: {product.price}‚Ç∏\n"
                f"üì¶ –í –Ω–∞–ª–∏—á–∏–∏: {product.stock} —à—Ç.\n"
                f"–û–ø–∏—Å–∞–Ω–∏–µ: {product.description}",
                reply_markup=markup
            )
    else:
        bot.send_message(call.message.chat.id, f"–í –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ {company.name} –ø–æ–∫–∞ –Ω–µ—Ç —Ç–æ–≤–∞—Ä–æ–≤.",
                         reply_markup=get_main_keyboard())

@bot.callback_query_handler(func=lambda call: call.data.startswith("add_to_cart_"))
def add_to_cart(call):
    try:
        product_id = int(call.data.replace("add_to_cart_", ""))  
    except ValueError:
        bot.answer_callback_query(call.id, "–û—à–∏–±–∫–∞: –Ω–µ–≤–µ—Ä–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ!")
        return
    telegram_id = call.from_user.id
    user = Users.objects.filter(telegram_id=telegram_id).first()
    if not user:
        bot.answer_callback_query(call.id, "–û—à–∏–±–∫–∞: –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        return
    product = Product.objects.filter(id=product_id).first()
    if not product:
        bot.answer_callback_query(call.id, "–û—à–∏–±–∫–∞: —Ç–æ–≤–∞—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        return
    cart_item, created = Cart.objects.get_or_create(user=user, product=product, defaults={'quantity': 1})
    if not created:
        cart_item.quantity += 1
        cart_item.save()
    bot.answer_callback_query(call.id, f"–¢–æ–≤–∞—Ä '{product.name}' –¥–æ–±–∞–≤–ª–µ–Ω –≤ –∫–æ—Ä–∑–∏–Ω—É!")

@bot.message_handler(func=lambda message: message.text == "üóÇ –ö–æ—Ä–∑–∏–Ω–∞")
def view_cart(message):
    telegram_id = message.from_user.id
    user = Users.objects.filter(telegram_id=telegram_id).first()
    
    if not user:
        bot.send_message(message.chat.id, "–û—à–∏–±–∫–∞: –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        return
    
    cart_items = Cart.objects.filter(user=user)
    if cart_items.exists():
        markup = types.InlineKeyboardMarkup()
        for item in cart_items:
            item_markup = types.InlineKeyboardMarkup()
            item_markup.add(
                types.InlineKeyboardButton("‚ûñ –£–±—Ä–∞—Ç—å", callback_data=f"remove_from_cart_{item.product.id}"),
                types.InlineKeyboardButton("‚ûï –î–æ–±–∞–≤–∏—Ç—å", callback_data=f"add_to_cart_{item.product.id}")
            )
            
            bot.send_message(
                message.chat.id,
                f"{item.product.name} - {item.quantity} —à—Ç. (–ò—Ç–æ–≥–æ: {item.total_price()}‚Ç∏)",
                reply_markup=item_markup
            )
        
        total_price = sum(item.total_price() for item in cart_items)
        checkout_markup = types.InlineKeyboardMarkup()
        checkout_markup.add(types.InlineKeyboardButton("–û—Ñ–æ—Ä–º–∏—Ç—å –∑–∞–∫–∞–∑ üí≥", callback_data="checkout"))
        
        bot.send_message(
            message.chat.id,
            f"–ò—Ç–æ–≥–æ –∫ –æ–ø–ª–∞—Ç–µ: {total_price}‚Ç∏",
            reply_markup=checkout_markup
        )
    else:
        bot.send_message(message.chat.id, "–í–∞—à–∞ –∫–æ—Ä–∑–∏–Ω–∞ –ø—É—Å—Ç–∞.", reply_markup=get_main_keyboard())

@bot.callback_query_handler(func=lambda call: call.data.startswith("remove_from_cart_"))
def remove_from_cart(call):
    try:
        product_id = int(call.data.replace("remove_from_cart_", ""))
        telegram_id = call.from_user.id
        user = Users.objects.filter(telegram_id=telegram_id).first()
        if not user:
            bot.answer_callback_query(call.id, "–û—à–∏–±–∫–∞: –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.")
            return
        cart_item = Cart.objects.filter(user=user, product_id=product_id).first()
        if cart_item:
            if cart_item.quantity > 1:
                cart_item.quantity -= 1
                cart_item.save()
            else:
                cart_item.delete()
            bot.answer_callback_query(call.id, "–¢–æ–≤–∞—Ä —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω –∏–∑ –∫–æ—Ä–∑–∏–Ω—ã.")
        else:
            bot.answer_callback_query(call.id, "–¢–æ–≤–∞—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –∫–æ—Ä–∑–∏–Ω–µ.")
        view_cart(call.message)
    except ValueError:
        bot.answer_callback_query(call.id, "–û—à–∏–±–∫–∞: –Ω–µ–≤–µ—Ä–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ!")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –∏–∑ –∫–æ—Ä–∑–∏–Ω—ã: {e}")
        bot.answer_callback_query(call.id, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")

def calculate(delivery_method, distance):
    base_price = delivery_method.base_price
    price_per_km = delivery_method.price_per_km
    total_delivery_price = base_price + (distance * price_per_km)
    return total_delivery_price

@bot.callback_query_handler(func=lambda call: call.data == "checkout")
def start_checkout(call):
    telegram_id = call.from_user.id
    user = Users.objects.filter(telegram_id=telegram_id).first()
    if not user:
        bot.answer_callback_query(call.id, "–û—à–∏–±–∫–∞: –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.") 
        return
    cart_items = Cart.objects.filter(user=user)
    if not cart_items.exists():
        bot.answer_callback_query(call.id, "–í–∞—à–∞ –∫–æ—Ä–∑–∏–Ω–∞ –ø—É—Å—Ç–∞.")
        return
    for item in cart_items:
        if item.quantity > item.product.stock:
            bot.answer_callback_query(call.id, f"–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Ç–æ–≤–∞—Ä–∞ {item.product.name} –Ω–∞ —Å–∫–ª–∞–¥–µ.")
            return
    total_price = sum(item.total_price() for item in cart_items)
    payment_markup = types.InlineKeyboardMarkup()
    payment_markup.add(
        types.InlineKeyboardButton(
            "–û–ø–ª–∞—Ç–∏—Ç—å —á–µ—Ä–µ–∑ CryptoBot üí≥", 
            url="t.me/send?start=IV2NwI3gdQpG"
        )
    )
    bot.send_message(
        call.message.chat.id, 
        f"–°—É–º–º–∞ –∫ –æ–ø–ª–∞—Ç–µ: {total_price}‚Ç∏\n"
        "–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ –¥–ª—è –ø–µ—Ä–µ—Ö–æ–¥–∞ –∫ –æ–ø–ª–∞—Ç–µ, –¥–æ —Ç–æ–≥–æ –∫–∞–∫ –æ–ø–ª–∞—Ç–∏—Ç–µ –Ω–∞–ø–∏—à–∏—Ç–µ –≤–∞—à–µ –∏–º—è –∏ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –¥–ª—è —Å–≤—è–∑–∏:",
        reply_markup=payment_markup
    )

def create_admin_panel(bot):
    @bot.message_handler(commands=['admin'])
    def admin_menu(message):
        if not is_admin(message.from_user.id):
            bot.reply_to(message, "–£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞.")
            return
        markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
        markup.add(
            "üì¶ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞–º–∏",
            "üìã –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞–∫–∞–∑–æ–≤",
            "üöö –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –¥–æ—Å—Ç–∞–≤–∫–∏"
        )
        bot.send_message(message.chat.id, "–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–∏–≤–Ω–∞—è –ø–∞–Ω–µ–ª—å:", reply_markup=markup)

    @bot.message_handler(func=lambda message: message.text == "üì¶ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞–º–∏")
    def manage_products(message):
        if not is_admin(message.from_user.id):
            bot.reply_to(message, "–£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞.")
            return
        markup = types.InlineKeyboardMarkup()
        markup.add(
            types.InlineKeyboardButton("‚ûï –î–æ–±–∞–≤–∏—Ç—å —Ç–æ–≤–∞—Ä", callback_data="add_product"),
            types.InlineKeyboardButton("‚úèÔ∏è –ò–∑–º–µ–Ω–∏—Ç—å —Ç–æ–≤–∞—Ä", callback_data="edit_product")
        )
        bot.send_message(message.chat.id, "–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞–º–∏:", reply_markup=markup)

    @bot.callback_query_handler(func=lambda call: call.data == "add_product")
    def add_product(call):
        bot.send_message(call.message.chat.id, "–î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞ –ø–æ–∫–∞ –Ω–µ —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω–æ. –ù–∞–ø–∏—à–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞.")

    @bot.callback_query_handler(func=lambda call: call.data == "edit_product")
    def edit_product(call):
        bot.send_message(call.message.chat.id, "–ò–∑–º–µ–Ω–µ–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞ –ø–æ–∫–∞ –Ω–µ —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω–æ. –ù–∞–ø–∏—à–∏—Ç–µ ID —Ç–æ–≤–∞—Ä–∞.")

    @bot.message_handler(func=lambda message: message.text == "üìã –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞–∫–∞–∑–æ–≤")
    def view_order_statistics(message):
        if not is_admin(message.from_user.id):
            bot.reply_to(message, "–£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞.")
            return
        stats = order_statistics()
        bot.send_message(message.chat.id, stats)

    @bot.message_handler(func=lambda message: message.text == "üöö –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –¥–æ—Å—Ç–∞–≤–∫–∏")
    def manage_delivery_settings(message):
        if not is_admin(message.from_user.id):
            bot.reply_to(message, "–£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞.")
            return
        bot.send_message(message.chat.id, "–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –¥–æ—Å—Ç–∞–≤–∫–∏ –ø–æ–∫–∞ –Ω–µ —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω–∞. –ù–∞–ø–∏—à–∏—Ç–µ –≤–∞—à –∑–∞–ø—Ä–æ—Å.")

def is_admin(telegram_id):
    admin_ids = [855861024]  
    return telegram_id in admin_ids

def order_statistics():
    total_orders = Order.objects.count()
    total_revenue = Order.objects.aggregate(total=Sum('total_price'))['total']
    top_products = OrderItem.objects.values('product__name').annotate(total_quantity=Sum('quantity')).order_by('-total_quantity')[:5]
    report = f"üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø—Ä–æ–¥–∞–∂:\n" \
             f"–í—Å–µ–≥–æ –∑–∞–∫–∞–∑–æ–≤: {total_orders}\n" \
             f"–û–±—â–∞—è –≤—ã—Ä—É—á–∫–∞: {total_revenue}‚Ç∏\n" \
             "–¢–æ–ø-5 –ø—Ä–æ–¥–∞–≤–∞–µ–º—ã—Ö —Ç–æ–≤–∞—Ä–æ–≤:\n"
    for product in top_products:
        report += f"- {product['product__name']}: {product['total_quantity']} —à—Ç.\n"
    return report
create_admin_panel(bot)

@bot.message_handler(func=lambda message: message.text == "üîç –ü–æ–∏—Å–∫")
def search_product_prompt(message):
    bot.send_message(
        message.chat.id,
        "–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞ –¥–ª—è –ø–æ–∏—Å–∫–∞:",
        reply_markup=get_main_keyboard()
    )
    user_states[message.from_user.id] = "searching"

@bot.message_handler(func=lambda message: user_states.get(message.from_user.id) == "searching")
def search_product(message):
    query = message.text
    products = Product.objects.filter(name__icontains=query)
    if products.exists():
        product_list = "\n".join([f"{product.name} - {product.price}‚Ç∏ (–í –Ω–∞–ª–∏—á–∏–∏: {product.stock} —à—Ç.)" for product in products])
        bot.send_message(message.chat.id, f"–ù–∞–π–¥–µ–Ω–æ:\n{product_list}", reply_markup=get_main_keyboard())
    else:
        bot.send_message(message.chat.id, f"–¢–æ–≤–∞—Ä—ã, —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–µ –∑–∞–ø—Ä–æ—Å—É '{query}', –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.",
                         reply_markup=get_main_keyboard())

@bot.message_handler(func=lambda message: message.text == "üì¶ –°–ø–∏—Å–æ–∫ —Ç–æ–≤–∞—Ä–æ–≤")
def list_product(message):
    products = Product.objects.all()
    if products.exists():
        response = "\n".join([f"{p.name} - {p.price}‚Ç∏ (–í –Ω–∞–ª–∏—á–∏–∏: {p.stock} —à—Ç.)" for p in products])
    else:
        response = "–¢–æ–≤–∞—Ä—ã –Ω–∞ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç, –º—ã —Å–æ–æ–±—â–∏–º –≤–∞–º, –∫–æ–≥–¥–∞ –ø–æ—Å—Ç—É–ø—è—Ç!"
    bot.reply_to(message, response)

bot.polling()
